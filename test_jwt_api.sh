#!/bin/bash

# Test script for Canton JSON API with JWT authentication
# This script tests the JWT tokens generated by generateJWT.js against the JSON API

set -e  # Exit on any error

# Configuration
JSON_API_URL="http://localhost:7575"
TOKENS_FILE="jwt-tokens.json"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}==================================================================${NC}"
echo -e "${BLUE}           CANTON JSON API JWT AUTHENTICATION TESTS${NC}"
echo -e "${BLUE}==================================================================${NC}"

# Check if JSON API is running
echo -e "\n${YELLOW}Checking if JSON API is running...${NC}"
if ! curl -s --connect-timeout 5 "${JSON_API_URL}/readyz" > /dev/null 2>&1; then
    echo -e "${RED}✗ JSON API is not running at ${JSON_API_URL}${NC}"
    echo -e "${YELLOW}Please start the JSON API first using: ./start_json_api.sh${NC}"
    exit 1
fi
echo -e "${GREEN}✓ JSON API is running${NC}"

# Check if tokens file exists
if [ ! -f "$TOKENS_FILE" ]; then
    echo -e "${RED}✗ Tokens file not found: $TOKENS_FILE${NC}"
    echo -e "${YELLOW}Please generate tokens first using: node generateJWT.js${NC}"
    exit 1
fi

# Load tokens from JSON file
echo -e "\n${YELLOW}Loading JWT tokens...${NC}"
PARTICIPANT_ADMIN_TOKEN=$(jq -r '.participant_admin // empty' "$TOKENS_FILE")
BANK_ADMIN_TOKEN=$(jq -r '.bank_admin // empty' "$TOKENS_FILE")
ALICE_USER_TOKEN=$(jq -r '.alice_user // empty' "$TOKENS_FILE")
BOB_USER_TOKEN=$(jq -r '.bob_user // empty' "$TOKENS_FILE")

# Verify tokens are loaded
if [ -z "$PARTICIPANT_ADMIN_TOKEN" ] || [ -z "$BANK_ADMIN_TOKEN" ] || [ -z "$ALICE_USER_TOKEN" ] || [ -z "$BOB_USER_TOKEN" ]; then
    echo -e "${RED}✗ Failed to load all tokens from $TOKENS_FILE${NC}"
    exit 1
fi
echo -e "${GREEN}✓ All tokens loaded successfully${NC}"

# Function to test API endpoint with a specific token
test_endpoint() {
    local test_name="$1"
    local token="$2"
    local endpoint="$3"
    local method="${4:-GET}"
    local data="$5"
    
    echo -e "\n${BLUE}Testing: $test_name${NC}"
    echo "Endpoint: $method $endpoint"
    
    local curl_cmd="curl -s -w '%{http_code}' -H 'Authorization: Bearer $token' -H 'Content-Type: application/json'"
    
    if [ "$method" = "POST" ] && [ -n "$data" ]; then
        curl_cmd="$curl_cmd -d '$data'"
    fi
    
    curl_cmd="$curl_cmd $JSON_API_URL$endpoint"
    
    local response
    local http_code
    
    # Execute curl and capture both response and status code
    local full_response=$(eval "$curl_cmd")
    http_code="${full_response: -3}"
    response="${full_response%???}"
    
    echo "HTTP Status: $http_code"
    
    if [ "$http_code" -ge 200 ] && [ "$http_code" -lt 300 ]; then
        echo -e "${GREEN}✓ SUCCESS${NC}"
        if [ -n "$response" ] && [ "$response" != "null" ]; then
            echo "Response (first 200 chars): ${response:0:200}..."
        fi
    elif [ "$http_code" -ge 400 ] && [ "$http_code" -lt 500 ]; then
        echo -e "${YELLOW}⚠ CLIENT ERROR (${http_code})${NC}"
        echo "Response: $response"
    else
        echo -e "${RED}✗ FAILED (${http_code})${NC}"
        echo "Response: $response"
    fi
    
    return 0
}

# Test 1: Basic health check (no auth required)
echo -e "\n${YELLOW}=== BASIC CONNECTIVITY TESTS ===${NC}"
test_endpoint "Health Check" "" "/readyz"

# Test 2: API version (should work with any valid token)
test_endpoint "API Version" "$ALICE_USER_TOKEN" "/v1/version"

# Test 3: Query endpoint tests with different users
echo -e "\n${YELLOW}=== AUTHENTICATION TESTS ===${NC}"

# Test with Alice's token
test_endpoint "Alice - Query Parties" "$ALICE_USER_TOKEN" "/v1/parties"

# Test with Bob's token  
test_endpoint "Bob - Query Parties" "$BOB_USER_TOKEN" "/v1/parties"

# Test with Bank Admin token
test_endpoint "Bank Admin - Query Parties" "$BANK_ADMIN_TOKEN" "/v1/parties"

# Test with Participant Admin token (should have broader access)
test_endpoint "Participant Admin - Query Parties" "$PARTICIPANT_ADMIN_TOKEN" "/v1/parties"

# Test 4: Query for active contracts
echo -e "\n${YELLOW}=== CONTRACT QUERY TESTS ===${NC}"

# Query active contracts for Alice
ALICE_QUERY='{"templateIds": [], "query": {}}'
test_endpoint "Alice - Query Active Contracts" "$ALICE_USER_TOKEN" "/v1/query" "POST" "$ALICE_QUERY"

# Query active contracts for Bob
BOB_QUERY='{"templateIds": [], "query": {}}'
test_endpoint "Bob - Query Active Contracts" "$BOB_USER_TOKEN" "/v1/query" "POST" "$BOB_QUERY"

# Test 5: Package listing (admin operation)
echo -e "\n${YELLOW}=== ADMIN OPERATION TESTS ===${NC}"
test_endpoint "Participant Admin - List Packages" "$PARTICIPANT_ADMIN_TOKEN" "/v1/packages"
test_endpoint "Alice - List Packages (should also work)" "$ALICE_USER_TOKEN" "/v1/packages"

# Test 6: Invalid token test
echo -e "\n${YELLOW}=== NEGATIVE TESTS ===${NC}"
INVALID_TOKEN="eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.invalid.token"
test_endpoint "Invalid Token Test" "$INVALID_TOKEN" "/v1/parties"

# Test 7: No token test
test_endpoint "No Token Test" "" "/v1/parties"

# Summary
echo -e "\n${BLUE}==================================================================${NC}"
echo -e "${BLUE}                         TEST SUMMARY${NC}"
echo -e "${BLUE}==================================================================${NC}"
echo -e "${GREEN}Tests completed. Check the results above for any failures.${NC}"
echo -e "${YELLOW}Note: Some tests may fail if no contracts/parties exist yet.${NC}"
echo -e "${YELLOW}This is normal for a fresh Canton deployment.${NC}"

# Additional curl examples for manual testing
echo -e "\n${YELLOW}=== SAMPLE CURL COMMANDS FOR MANUAL TESTING ===${NC}"
echo "1. Query parties as Alice:"
echo "curl -H \"Authorization: Bearer \$ALICE_USER_TOKEN\" \\"
echo "     -H \"Content-Type: application/json\" \\"
echo "     $JSON_API_URL/v1/parties"
echo ""
echo "2. Query active contracts as Alice:"
echo "curl -X POST \\"
echo "     -H \"Authorization: Bearer \$ALICE_USER_TOKEN\" \\"
echo "     -H \"Content-Type: application/json\" \\"
echo "     -d '{\"templateIds\": [], \"query\": {}}' \\"
echo "     $JSON_API_URL/v1/query"
echo ""
echo "3. List packages (admin):"
echo "curl -H \"Authorization: Bearer \$PARTICIPANT_ADMIN_TOKEN\" \\"
echo "     -H \"Content-Type: application/json\" \\"
echo "     $JSON_API_URL/v1/packages"

echo -e "\n${GREEN}Test script completed successfully!${NC}"